name: Spring Boot CI

on: [push]

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
      name: Check out the repository code

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests
      env:
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_ACCESS_STRING: ${{ secrets.DB_ACCESS_STRING }}
      run: ./mvnw test

    - name: Build Docker image
      if: github.ref == 'refs/heads/main'
      env:
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_ACCESS_STRING: ${{ secrets.DB_ACCESS_STRING }}
      run: docker build . -t ghcr.io/${{ github.repository_owner }}/spring-boot-app:latest

#    - name: Run Docker container
#      if: github.ref == 'refs/heads/main'
#      env:
#        DB_NAME: ${{ secrets.DB_NAME }}
#        DB_ACCESS_STRING: ${{ secrets.DB_ACCESS_STRING }}
#      run: docker run -d --name spring-boot-testing -p 8080:8080 spring-boot-app
#
#    - name: Health check
#      if: github.ref == 'refs/heads/main'
#      run: sleep 30 # Adjust based on your app's startup time

    - name: Log in to GitHub Container Registry
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GIT_ACCESS_TOKEN }}

    - name: Push Docker image to GitHub Container Registry
      if: github.ref == 'refs/heads/main'
      run: docker push ghcr.io/${{ github.repository_owner }}/spring-boot-app:latest
      
#    - name: Set up Kubeconfig
#      if: github.ref == 'refs/heads/main'
#      env:
#        KUBECONFIG_CONTENTS: ${{ secrets.KUBECONFIG }}
#      run: |
#        echo "$KUBECONFIG_CONTENTS" > ./kubeconfig
#        echo "KUBECONFIG_FILE=./kubeconfig" >> $GITHUB_ENV

    - name: Apply Kubernetes deployment
      if: github.ref == 'refs/heads/main'
      run: |
        export KUBECONFIG=$KUBECONFIG_FILE
        envsubst < deployment.yml | kubectl apply -f -
      env:
        KUBECONFIG_FILE: ${{ env.KUBECONFIG_FILE }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_ACCESS_STRING: ${{ secrets.DB_ACCESS_STRING }}


#    - name: Deploy to Kubernetes
#      if: github.ref == 'refs/heads/main'
#      env:
#        DB_NAME: ${{ secrets.DB_NAME }}
#        DB_ACCESS_STRING: ${{ secrets.DB_ACCESS_STRING }}
#        KUBECONFIG_FILE: ./kubeconfig
#      run: |
#        export KUBECONFIG=$KUBECONFIG_FILE
#        kubectl set env deployment/spring-boot-app DB_ACCESS_STRING=${DB_ACCESS_STRING}
#        kubectl set env deployment/spring-boot-app DB_NAME=${DB_NAME}
#        kubectl --kubeconfig $KUBECONFIG_FILE apply -f deployment.yml
#        kubectl --kubeconfig $KUBECONFIG_FILE rollout status deployment/spring-boot-app

    - name: Delete existing service if it exists
      run: kubectl --kubeconfig $KUBECONFIG_FILE delete service spring-boot-app || true

    - name: Expose deployment
      if: github.ref == 'refs/heads/main'
      env:
        KUBECONFIG_FILE: ./kubeconfig
      run: |
        kubectl --kubeconfig $KUBECONFIG_FILE expose deployment spring-boot-app --type=NodePort --port=8081
